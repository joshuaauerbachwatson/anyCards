/**
 * Copyright (c) 2021-present, Joshua Auerbach
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import Foundation
import MultipeerConnectivity

// Represents a Player.  The player is known by a name and has an "order" field (each player generates this field randomly; once generated,
// it determines the order that players appear in the player list.
struct Player : Codable, Equatable {
    let name : String
    let order : UInt32

    // Memberwise initializer not generated by compiler since I declare another initializer
    init(name: String, order: UInt32) {
        self.name = name
        self.order = order
    }

    // Initialzer used to generate your own Player struct (once)
    init(_ name: String) {
        self.init(name: name, order: arc4random())
    }
}
